import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "–¢–û–ö–ï–ù –ë–û–¢"
OWM_API_KEY = "28caefc76d9af8c1c35079990b58b435"
WEATHER_STATES = {
    'Thunderstorm': '‚õà –ì—Ä–æ–∑–∞',
    'Drizzle': 'üåß –ú–æ—Ä–æ—Å—å',
    'Rain': 'üåß –î–æ–∂–¥—å',
    'Snow': '‚ùÑ –°–Ω–µ–≥',
    'Mist': 'üå´ –¢—É–º–∞–Ω',
    'Smoke': 'üå´ –î—ã–º–∫–∞',
    'Haze': 'üå´ –ú–≥–ª–∞',
    'Dust': 'üå´ –ü—ã–ª—å',
    'Fog': 'üå´ –¢—É–º–∞–Ω',
    'Sand': 'üå´ –ü–µ—Å—á–∞–Ω–∞—è –±—É—Ä—è',
    'Ash': 'üå´ –í—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∏–π –ø–µ–ø–µ–ª',
    'Squall': 'üí® –®–∫–≤–∞–ª',
    'Tornado': 'üå™ –¢–æ—Ä–Ω–∞–¥–æ',
    'Clear': '‚òÄ –Ø—Å–Ω–æ',
    'Clouds': '‚òÅ –û–±–ª–∞—á–Ω–æ'
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CITY, DAYS = range(2)

# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã.\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã.\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /forecast –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π."
    )

# –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞
async def get_weather(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    city = update.message.text
    weather_data = fetch_weather(city)
    
    if weather_data:
        await update.message.reply_text(format_current_weather(weather_data), parse_mode='HTML')
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")

# –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
async def forecast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return CITY

# –ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ä–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
async def received_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['city'] = update.message.text
    
    reply_keyboard = [['1', '3', '5']]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (–º–∞–∫—Å–∏–º—É–º 5):",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    )
    return DAYS

# –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑
async def received_days(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    city = context.user_data['city']
    days = int(update.message.text)
    
    if days < 1 or days > 5:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç 1 –¥–æ 5 –¥–Ω–µ–π.")
        return DAYS
    
    forecast_data = fetch_weather_forecast(city, days)
    
    if forecast_data:
        for day_forecast in format_forecast(forecast_data, days):
            await update.message.reply_text(day_forecast, parse_mode='HTML')
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
    
    return ConversationHandler.END

# –û—Ç–º–µ–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–û—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É —Å OpenWeatherMap API
def fetch_weather(city: str) -> dict:
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OWM_API_KEY}&units=metric&lang=ru"
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except:
        return None

# –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã —Å OpenWeatherMap API
def fetch_weather_forecast(city: str, days: int) -> dict:
    try:
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OWM_API_KEY}&units=metric&lang=ru&cnt={days*8}"
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except:
        return None

# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥–µ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
def format_current_weather(data: dict) -> str:
    city = data['name']
    country = data['sys']['country']
    temp = data['main']['temp']
    feels_like = data['main']['feels_like']
    humidity = data['main']['humidity']
    wind_speed = data['wind']['speed']
    weather_desc = WEATHER_STATES.get(data['weather'][0]['main'], data['weather'][0]['description'])
    weather_icon = data['weather'][0]['icon']
    
    return (
        f"<b>–ü–æ–≥–æ–¥–∞ –≤ {city}, {country}</b>\n\n"
        f"<b>{weather_desc}</b> <i>({temp}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)</i>\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
        f"üå¨ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
        f"\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {data['dt']}</i>"
    )

# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
def format_forecast(data: dict, days: int) -> list:
    city = data['city']['name']
    country = data['city']['country']
    forecasts = []
    
# –ë–µ—Ä–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω—É –¥–Ω—è (–æ–±—ã—á–Ω–æ 12:00)
    for i in range(days):
        day_data = data['list'][i*8 + 4] if len(data['list']) > i*8 + 4 else data['list'][-1]
        date = day_data['dt_txt'].split()[0]
        temp = day_data['main']['temp']
        feels_like = day_data['main']['feels_like']
        humidity = day_data['main']['humidity']
        wind_speed = day_data['wind']['speed']
        weather_desc = WEATHER_STATES.get(day_data['weather'][0]['main'], day_data['weather'][0]['description'])
        
        forecast_text = (
            f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {date} –≤ {city}, {country}</b>\n\n"
            f"<b>{weather_desc}</b> <i>({temp}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)</i>\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üå¨ –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å"
        )
        forecasts.append(forecast_text)
    
    return forecasts

def main() -> None:
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, get_weather))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('forecast', forecast)],
        states={
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_city)],
            DAYS: [MessageHandler(filters.Regex('^(1|3|5)$'), received_days)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()